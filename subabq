#!/bin/bash
sname=`basename "$0"`
#----------------------------------------------------------------
function _split(){
        local n=$1 n1 n2
        n1=`echo $n | awk -F: '{print $1}'`
        n2=`echo $n | awk -F: '{print $2}'`
        eval $2=$n1 ; eval $3=$n2
}
#----------------------------------------------------------------
function Usage(){
	echo "Create and submit job for Abaqus"
	echo ""
	echo "Usage: ${sname} <INPUT> [OPTION]"
	echo "   
	-n  <n1[:n2]>     Number of MPI and OpenMP processors.
	-N  <n3[:n4]>     Number of nodes and number of tasks per node. 
	-m  <mem>         Memory required for job (GB).
        -p  <part>        Partition name to submit the job. (use 'sinfo')
        -v  <ver>         Software version. Available: 2022
        -f  <file> 	  The name of the input Fortran file.
	-o  <opt>         The desired options of the abq command.
	-j  <jobname>     Default: name of input file.
        -l  <disk>        Disk space required for scratch (GB). Default: 10
        -t  <time>        run time of the job. Valid format: M, H:M:S, D-H, D-H:M
	-so <sopt>        Additional slurm options if needed.
	-no               Only write job file.
	-mpi              Using <mpi> instead of <threads> in the mp_mode option.
	-h | --help       Print this message and exit."
	echo ""
	echo " Example:   ${sname} pipe.inp -n 4 -m 4 -f umat.f -t 4-0 -j Job1 -o 'double=both' -l 150 "
	echo ""
	exit
}
[[ $# -eq 0 ]] && Usage
#----------------------------------------------------------------
PART=amd128
SLNTPN="##SBATCH --ntasks-per-node="
SLTIME="##SBATCH --time="
SLNN="##SBATCH -N "
submit=1
Ver=2022
nn=1
Disk=10
MPI=0
#----------------------------------------------------------------
SOPT='n:m:p:v:N:f:j:o:t:l:h'
LOPT='no,mpi,so:,help'
OPTS=$(getopt -a -o ${SOPT} -l ${LOPT} -n ${sname} -- "$@")
[ $? -ne 0 ] && echo 'Terminating...' >&2 && exit 1
eval set -- "$OPTS"
unset OPTS
while true; do
	case "$1" in
		-n)
			_split $2 np nt
			shift		;;
		-m)
			mem=$2
			shift		;;
		-p)
			PART=$2
			shift		;;
		-t)
			SLTIME=${SLTIME:1}$2
			shift		;;
		-v)
			Ver=$2
			shift		;;
		-N)
			_split $2 nn ntpn
			shift		;;
		-f)
			Fortran=$2
			shift		;;
		-o)
			ext_opt=$2
			shift		;;
		-j)
			jobname=$2
			shift		;;
		-l)
			Disk=$2
			shift		;;
		--so)
			slurm_opt=$2
			shift		;;
		--no)
			submit=0	;;
		--mpi)
			MPI=1		;;
		-h|--help)
			Usage ; exit	;;
		--)
			shift ; break	;;
		*)
			echo "$1: Wrong optiona!" >&2
			exit 1		;;
	esac
	shift
done
#echo 'Remaining arguments:'
for arg; do
	[[ -z $input ]] &&  input=$arg && continue
	echo "not defined argument --> '$arg'"
done
[[ -z $input  ||  ! -e $input ]] && echo "invalid input file name" && exit
#----------------------------------------------------------------
[[ -z $np ]]  && echo "Error: Number of processors not defined" && exit
[[ -z $mem ]] && echo "Error: Memory required not defined" && exit
[[ $np -gt 24 ]] && np=24 || true
[[ $nn -gt 1 && -z $ntpn ]] && ntpn=$((np/nn + 1))

if [ $MPI -eq 0 ]; then
	nt=$np
	ntpn=1 ; nn=1
	MOD=threads
else
	[ -z $nt ]  && nt=1
	[ -z $ntpn ] && ntpn=$np
	MOD=mpi
fi
[[ ! -z $ntpn ]] && SLNTPN=${SLNTPN:1}$ntpn
#================================================
if [ "$mem" == "0" ]; then
  slcmd1="#SBATCH --exclusive"
else
  slcmd1="#SBATCH --mem=${mem}G"
  memJob=$((1024*mem -200))
  Memory="memory=\"$memJob mb\""
fi
#================================================
[[ $(file $input) =~ CRLF ]] && dos2unix -q $input
#-----------------------------------
bname="${input%.*}"
[ "$bname" == "${bname^}" ] && bname=${bname,} || bname=${bname^}

#jobname=`echo "$bname" | tr '[a-z]' '[A-Z]'`
[[ -z $jobname ]] && jobname=$bname
#-----------------------------------
fext=${input##*.}
if [ "$fext" == "py" ]; then
   sed -i "s/NCPU\=[0-9]\+/NCPU\=$np/g" $input
   grep memoryUnits=PERCENTAGE $input > /dev/null
   STAT=$?
   if [ $STAT -eq 0 ]; then
      sed -i "s/memory\=[0-9]\+/memory\=70/g" $input
   fi
   command="abq cae noGUI=$infile"

elif [ "$fext" == "inp" ]; then
   OPT="scratch=/tmp cpus=$np $Memory mp_mode=$MOD"
   [[ ! -z $Fortran ]] && OPT+=" user=$Fortran"
   command="abq job=$jobname input=$input $OPT $ext_opt interactive"

elif [ "$fext" == "f" ]; then
   command="abq make job=$input ; abq $input"
else
   echo "Input filename extension should be .inp or .py or .f "
   exit
fi
#================================================
[ $MPI -eq 1 ] && IENV="export I_MPI_PIN=0"
#================================================
cat << END > $jobname.job
#!/bin/bash
#SBATCH -J $jobname
#SBATCH -o %x_%j.out
$slcmd1

## number of nodes
#SBATCH -N $nn

## number of cores
##SBATCH -n $np

## number of tasks per node (MPI task)
$SLNTPN

## number of cpus per task (OpenMP Threads)
#SBATCH --cpus-per-task=$nt

## how long job takes, wallclock time d-hh:mm:ss
$SLTIME

## name of queue or partition
#SBATCH --partition=$PART

#SBATCH --gres=tmp:${Disk}
#SBATCH --wckey abaqus

ml abaqus/$Ver
$IENV

$command
rm -f \$SLURM_SUBMIT_DIR/${jobname}.job
END
[[ $submit -eq 1 ]] && sbatch  $slurm_opt ${jobname}.job
