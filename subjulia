#!/bin/bash
sname=`basename $0`
submit=1
Disk=2
Part=amd128
SLTIME="##SBATCH --time="
SLARRY="##SBATCH --array="
Ver=1.7.3
NG=0
CUDA=""
#======================================================================
function Usage(){
	echo "Create and submit job for Julia (Programming language)"
        echo ""
        echo "Usage: ${sname} <INPUT> [OPTION]"
        echo "
        -n  <np>          Number of processors.
        -m  <mem>         Memory required for job (GB).
        -p  <part>        Partition name to submit the job. (use 'sinfo')
	-d  <disk>        Disk space required for scratch (GB).
	-v  <ver>         Julia Version. Default: 1.7.3 Avail: 1.7.3, 1.9.3
	-j  <name>        Slurm Job Name. Default: name of INPUT.
        -t  <time>        run time of the job. Valid format: M, H:M:S, D-H, D-H:M
	-g  <gpu>         Number of GPU Device. Default: 0
	-a  <n1-n2>       Use this option for array job.
	-o  <opt>         Julia options
        -so <sopt>        Additional slurm options if needed.
        -no               Only write job file.
        -h | --help       Print this message and exit."
        echo ""
        echo " Example:  $sname script.jl -n 4 -m 5 -t 2-0 "
        echo ""
	exit
}
#======================================================================
[[ $# -eq 0 ]] && Usage
SOPT='n:m:p:a:v:d:j:ht:o:g:'
LOPT='no,so:,help'
OPTS=$(getopt -a -o ${SOPT} -l ${LOPT} -n ${sname} -- "$@")
[ $? -ne 0 ] && echo 'Terminating...' >&2 && exit 1
eval set -- "$OPTS"
unset OPTS
while true; do
	case "$1" in
		-n)
			np=$2
			shift		;;
		-m)
			mem=$2
			shift		;;
		-p)
			Part=$2
			shift		;;
		-t)
			SLTIME=${SLTIME:1}$2
			shift		;;
		-d)
			Disk=$2
			shift		;;
		-v)
			Ver=$2
			shift		;;
		-j)
			jobname=$2
			shift		;;
		-o)
			R_opt=$2
			shift		;;
		-a)
			SLARRY=${SLARRY:1}$2
			SA=1
			shift 		;;
		-g)
			NG=$2
			shift		;;
		--so)
			slurm_opt=$2
			shift		;;
		--no)
			submit=0	;;
		-h | --help)
			Usage ; exit	;;
		--)
			shift ; break	;;
		*)
			echo "$1: Wrong option!" >&2
			exit 1		;;
	esac
	shift
done
#echo 'Remaining arguments:'
for arg; do
	[[ -z $input ]] &&  input=$arg && continue
#	echo "not defined argument --> '$arg'"
done
#======================================================================
if ! [ -e "$input" ]; then
  echo '-----------Error------------'
  echo "$input: file not found" >&2
  echo '----------------------------'
  exit 1
fi
#-----------------------------------
[[ -z $jobname ]] && jobname=${input%.*}
dos2unix -q $input 
#-----------------------------------
[[ -z $np ]]  && echo "Error: Number of processors not defined" && exit
[[ -z $mem ]] && echo "Error: Memory required not defined" && exit
#-----------------------------------
if [ "$mem" == "0" ]; then
  slcmd1="#SBATCH --exclusive"
else
  slcmd1="#SBATCH --mem=${mem}G"
fi
#-----------------------------------
[[ $NG -gt 0 ]] && Part="gpu" && CUDA="module load cuDNN/8.4.1.50-CUDA-11.7.0"
[[ $np -gt 64 ]] && Part="gpu"
#-----------------------------------
if [ ! -z $SA ]; then
   APPEND="--open-mode=append"
fi
#-----------------------------------
cat << END > $jobname.job
#!/bin/bash
#SBATCH -J $jobname
#SBATCH -o %x_%A.out $APPEND
#
$slcmd1
#
## number of nodes
#SBATCH -N 1
 
## number of tasks
#SBATCH -n 1

## number of cpus per task (OpenMP Threads)
#SBATCH --cpus-per-task=$np

## Submit a job array, multiple jobs to be executed with identical parameters.
$SLARRY

## how long job takes, wallclock time d-hh:mm:ss
$SLTIME

## name of queue or partition
#SBATCH --partition=$Part

#SBATCH --gres=tmp:${Disk},gpu:$NG
#SBATCH --wckey=julia

module load Julia/$Ver

# your commands
export JULIA_NUM_THREADS=$np

#julia --project -e 'import Pkg; Pkg.instantiate();include("$input")'
julia $input \${SLURM_ARRAY_TASK_ID}
rm -f $jobname.job
END

if [ $submit -eq 1 ]; then
   sbatch $slurm_opt $jobname.job
fi
