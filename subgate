#!/bin/bash
sname=`basename $0`
submit=1
Disk=2
Part=amd128
SLTIME="##SBATCH --time="
SLARRY="##SBATCH --array="
Ver=9.2
NG=0
CUDA=""
ALIAS=""
#======================================================================
function Usage(){
	echo "Create and submit job for GATE"
        echo ""
        echo "Usage: ${sname} <macro_file> [OPTION]"
        echo "
        -n  <np>          Number of processors. Default: 2
        -m  <mem>         Memory required for job (GB).
        -p  <part>        Partition name to submit the job. (use 'sinfo')
	-d  <disk>        Disk space required for scratch (GB).
	-v  <ver>         Geant4 Version. Default: 9.2 Avail: 9.2
	-j  <name>        Slurm Job Name. Default: name of macro file.
        -t  <time>        run time of the job. Valid format: M, H:M:S, D-H, D-H:M
	-al <alias>       Alias in macro file
        -so <sopt>        Additional slurm options if needed.
        -no               Only write job file.
        -h | --help       Print this message and exit."
        echo ""
        echo " Example:  $sname 'mainrun.mac' -n 4 -m 5 -t 2-0 "
        echo ""
	exit
}
#======================================================================
[[ $# -eq 0 ]] && Usage
SOPT='n:m:p:a:v:d:j:ht:'
LOPT='no,so:,al:,help'
OPTS=$(getopt -a -o ${SOPT} -l ${LOPT} -n ${sname} -- "$@")
[ $? -ne 0 ] && echo 'Terminating...' >&2 && exit 1
eval set -- "$OPTS"
unset OPTS
while true; do
	case "$1" in
		-n)
			np=$2
			shift		;;
		-m)
			mem=$2
			shift		;;
		-p)
			Part=$2
			shift		;;
		-t)
			SLTIME=${SLTIME:1}$2
			shift		;;
		-d)
			Disk=$2
			shift		;;
		-v)
			Ver=$2
			shift		;;
		-j)
			jobname=$2
			shift		;;
		-a)
			SLARRY=${SLARRY:1}$2
			SA=1
			shift 		;;
		--al)
			ALIAS="-a \"$2\" "
			shift		;;
		--so)
			slurm_opt=$2
			shift		;;
		--no)
			submit=0	;;
		-h | --help)
			Usage ; exit	;;
		--)
			shift ; break	;;
		*)
			echo "$1: Wrong option!" >&2
			exit 1		;;
	esac
	shift
done
#echo 'Remaining arguments:'
for arg; do
	[[ -z $input ]] &&  input=$arg && continue
	echo "not defined argument --> '$arg'"
done
#======================================================================
if ! [ -e "$input" ]; then
  echo '-----------Error------------'
  echo "$input: file not found" >&2
  echo '----------------------------'
  exit 1
fi
[[ -z "$jobname" ]] && { JN1=${input%.*}; jobname=${JN1~} ; }  || true
#======================================================================
#-----------------------------------
[[ -z $np ]]  && np=2 || true
[[ -z $mem ]] && echo "Error: Memory required not defined" && exit
#-----------------------------------
if [ "$mem" == "0" ]; then
  slcmd1="#SBATCH --exclusive"
else
  slcmd1="#SBATCH --mem=${mem}G"
fi
#-----------------------------------
if [ ! -z $SA ]; then
   ID="ID=\$SLURM_ARRAY_TASK_ID"
   output=${input}out\$ID
   ARGS="\"--args $arg=\$ID\""
fi
#-----------------------------------
cat << END > $jobname.job
#!/bin/bash
#SBATCH -J $jobname
#SBATCH -o %x_%j.out
#
$slcmd1
#
## number of nodes
#SBATCH -N 1
 
## number of tasks
#SBATCH -n 1

## number of cpus per task (OpenMP Threads)
#SBATCH --cpus-per-task=$np

## Submit a job array, multiple jobs to be executed with identical parameters.
$SLARRY

## how long job takes, wallclock time d-hh:mm:ss
$SLTIME

## name of queue or partition
#SBATCH --partition=$Part

#SBATCH --gres=tmp:${Disk}
#SBATCH --wckey=gate

module load GATE/$Ver

# your commands
Gate $ALIAS $input

rm -f $jobname.job
END

[ $submit -eq 1 ] && sbatch $slurm_opt $jobname.job
