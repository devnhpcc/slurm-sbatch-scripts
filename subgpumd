#!/bin/bash
sname=`basename "$0"`
#----------------------------------------------------------------
function _split(){
        local n=$1 n1 n2
        n1=`echo $n | awk -F: '{print $1}'`
        n2=`echo $n | awk -F: '{print $2}'`
        eval $2=$n1 ; eval $3=$n2
}
#----------------------------------------------------------------
function Usage(){
	echo "Create and submit job for GPUMD"
	echo ""
	echo "Usage: ${sname} [OPTION]"
	echo "   
	-n  <n1>          Number of MPI and OpenMP processors.
	-N  <n2>          Number of nodes and number of tasks per node. 
	-m  <mem>         Memory required for job (GB).
        -p  <part>        Partition name to submit the job. (use 'sinfo')
        -v  <ver>         Software version. Default: 3.9.1
	-j  <jobname>     Default: GPUMD or NEP
	-g  <gpu>         Number of GPU Device. Default: 1
        -t  <time>        run time of the job. Valid format: M, H:M:S, D-H, D-H:M
	-so <sopt>        Additional slurm options if needed.
	-no               Only write job file.
	-nep              Run nep.
	-h | --help       Print this message and exit."
	echo ""
	echo " Example:   ${sname} -m 2 -t 1-0"
	echo " Example:   ${sname} -m 2 -nep -t 1-0"
	echo ""
	exit
}
[[ $# -eq 0 ]] && Usage
#----------------------------------------------------------------
SLNTPN="##SBATCH --ntasks-per-node="
SLTIME="##SBATCH --time="
SLNN="##SBATCH -N "
submit=1
Part=gpu
EXE=gpumd
Disk=1
NGPU=1
nn=1
np=1
nt=1
mem=1
Ver=3.9.1
jobname=GPUMD
#----------------------------------------------------------------
SOPT='n:m:p:v:g:j:t:l:h'
LOPT='no,nep,so:,help'
OPTS=$(getopt -a -o ${SOPT} -l ${LOPT} -n ${sname} -- "$@")
[ $? -ne 0 ] && echo 'Terminating...' >&2 && exit 1
eval set -- "$OPTS"
unset OPTS
while true; do
	case "$1" in
		-n)
			_split $2 np nt
			shift		;;
		-m)
			mem=$2
			shift		;;
		-p)
			Part=$2
			shift		;;
		-t)
			SLTIME=${SLTIME:1}$2
			shift		;;
		-v)
			Ver=$2
			shift		;;
		-g)
			NGPU=$2
			shift		;;
		-j)
			jobname=$2
			shift		;;
		-l)
			Disk=$2
			shift		;;
		--so)
			slurm_opt=$2
			shift		;;
		--nep)
			EXE=nep
			jobname=NEP	;;
		--no)
			submit=0	;;
		-h|--help)
			Usage ; exit	;;
		--)
			shift ; break	;;
		*)
			echo "$1: Wrong optiona!" >&2
			exit 1		;;
	esac
	shift
done
#echo 'Remaining arguments:'
#for arg; do
#	[[ -z $input ]] &&  input=$arg && continue
#	echo "not defined argument --> '$arg'"
#done
#----------------------------------------------------------------
#================================================
if [ "$mem" == "0" ]; then
  slcmd1="#SBATCH --exclusive"
else
  slcmd1="#SBATCH --mem=${mem}G"
fi
#================================================
case $Ver in
	3.9.1)
		module="GPUMD/3.9.1" ;;
	3.9.1-pl)
		module="GPUMD/3.9.1-plumed" ;;
	*)
		echo "Invalid version."
esac
#================================================
dos2unix -q *.in
#-----------------------------------
jobfile=${jobname}.job
cat << END > $jobfile
#!/bin/bash
#SBATCH -J $jobname
#SBATCH -o %x_%j.out
$slcmd1

## number of nodes
#SBATCH -N $nn

## number of cores
#SBATCH -n $np

## number of cpus per task (OpenMP Threads)
#SBATCH --cpus-per-task=$nt

## how long job takes, wallclock time d-hh:mm:ss
$SLTIME

## name of queue or partition
#SBATCH --partition=$Part

#SBATCH --gres=tmp:${Disk},gpu:$NGPU
#SBATCH --wckey gpumd

module load $module
export SRUN_CPUS_PER_TASK=\$SLURM_CPUS_PER_TASK

srun $EXE

END
[[ $submit -eq 1 ]] && sbatch  $slurm_opt ${jobfile}
