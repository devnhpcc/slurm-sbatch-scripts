#!/usr/bin/env python3
#coding: utf-8

import argparse
import os
import sys
import re
import time

parser = argparse.ArgumentParser(description='Create and submit job for MaxQuant')
parser.add_argument('input_xml', type=argparse.FileType('r', encoding='UTF-8'))
parser.add_argument('raw_file_folders', type=str, nargs='+')
parser.add_argument('-o', '--outfile', type=str, required=True)
parser.add_argument('-f', '--fasta', type=str, help='fasta file')
parser.add_argument('-n', '--threads', type=int, help='Number of threads')
parser.add_argument('-m', '--memory', type=int, required=True,help='Required memory in GB')
parser.add_argument('-t', '--time', type=str, required=True,help='Approximate execution time')
parser.add_argument('-p', '--partition', type=str, default='amd128',help='Partition name')
parser.add_argument('-v', '--version', type=str, default='2.4.9.0', choices=['1.6.3.4', '2.4.9.0'], help='MaxQuant version')
parser.add_argument('-s', '--start', type=int, help='Start processing from the specified job id')
parser.add_argument('-e', '--end', type=int, help='Finish processing at the specified job id')
parser.add_argument('-no', default =True, action="store_false",help='does not submit job')

args = parser.parse_args()

mq_opt = ''
if args.end:
    mq_opt = ('-e ' + str(args.end))
if args.start:
    mq_opt += (' -p ' + str(args.start))

mqpar = open(args.input_xml.name, 'r')
mqpar_text = mqpar.read()
mqpar.close()

# current working directory
PWD = os.getcwd()

if args.fasta is None:
   folder = os.path.abspath(args.raw_file_folders[0])
   files = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]
   # only take fasta files
   files = [f for f in files if f[-6:] == '.fasta']
   if files:
      fasta_path = os.path.join(folder,files[0])
   else:
      print("No fasta file found.") ; quit()

elif os.path.isfile(args.fasta):
   fasta_path=os.path.abspath(args.fasta)
   if not fasta_path.endswith(".fasta"):
       print(args.fasta,"is not a fasta file!") ; quit()

# replace fasta path
#fasta_path = '/home/admin/MaxQuant/MaxQuant_tutorial/SB_Human_CSC_Course_190102.fasta'
fasta_path = ('<fastaFilePath>' + fasta_path + '</fastaFilePath>')
mqpar_text = re.sub(r'\<fastaFilePath\>(.|\n|\r)*\<\/fastaFilePath\>', fasta_path, mqpar_text)

file_counter = 0
file_path_repl_text = '<filePaths>\n'

for folder in args.raw_file_folders:
  folder = os.path.abspath(folder)
  files = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]
  # only take raw files
  files = [f for f in files if f[-4:] == '.raw']

  for file in files:
    file_path_repl_text += ('<string>' + os.path.join(folder, file) + '</string>\n')
    file_counter += 1

file_path_repl_text += '</filePaths>'

mqpar_text = re.sub(r'\<filePaths\>(.|\n|\r)*\<\/filePaths\>', file_path_repl_text, mqpar_text)

# change experiments, fractions, ptms, paramGroupIndices to reflect # of raw files added
experiments_text = '<experiments>\n'
fractions_text = '<fractions>\n'
ptms_text = '<ptms>\n'
group_inds_text = '<paramGroupIndices>\n'
reference_channels_text = '<referenceChannel>\n'

if args.threads is None:
    NT = min(file_counter,48)
else:
    NT = min(file_counter,args.threads)

for i in range(0, file_counter):
  experiments_text += '<string></string>\n'
  fractions_text += '<short>32767</short>\n'
  ptms_text += '<boolean>False</boolean>\n'
  group_inds_text += '<int>0</int>\n'
  reference_channels_text += '<string></string>\n'

experiments_text += '</experiments>\n'
fractions_text += '</fractions>\n'
ptms_text += '</ptms>\n'
group_inds_text += '</paramGroupIndices>\n'
reference_channels_text += '</referenceChannel>'

mqpar_text = re.sub(r'\<experiments\>(.|\n|\r)*\<\/referenceChannel\>', \
  experiments_text+fractions_text+ptms_text+group_inds_text+reference_channels_text, mqpar_text)


# ok, instead, name the output folder after the named xml output
output_folder = os.path.basename(args.outfile)
# remove the .xml, if it exists
output_folder = re.sub(r'\.xml', '', output_folder)
output = output_folder
# remove the beginning "mqpar_", if it exists
output_folder = re.sub(r'mqpar_', '', output_folder)
# upper case folder
output_folder = output_folder.upper()
# append the current working directory
output_folder = os.path.join(PWD , output_folder)

# create the folder
if not os.path.exists(output_folder):
  os.makedirs(output_folder)

# add xml around
mqpar_text = re.sub(r'\<fixedCombinedFolder\>(.|\n|\r)*\<\/fixedCombinedFolder\>',\
  ('<fixedCombinedFolder>' + output_folder + '</fixedCombinedFolder>'), mqpar_text)

# replace andromeda index -- folder inside of the output folder
andromeda_index_path = os.path.join(output_folder, 'andromeda_index')
andromeda_index_path = ('<fixedSearchFolder>' + andromeda_index_path + '</fixedSearchFolder>')
mqpar_text = re.sub(r'\<fixedSearchFolder\>(.|\n|\r)*\<\/fixedSearchFolder\>', andromeda_index_path, mqpar_text)

# replace temp folder -- folder inside of the output folder

#temp_path = os.path.join('/tmp', output)
temp_path = '/tmp'
temp_path = ('<tempFolder>' + temp_path + '</tempFolder>')
mqpar_text = re.sub(r'\<tempFolder\>(.|\n|\r)*\<\/tempFolder\>', temp_path, mqpar_text)

# replace number of threads
threads_tag = ('<numThreads>' + str(NT) + '</numThreads>')
mqpar_text = re.sub(r'\<numThreads\>(.|\n|\r)*\<\/numThreads\>', threads_tag, mqpar_text)

# write XML file
xml_output = (output + '.xml')
out_file = open(xml_output, 'w')
out_file.write(mqpar_text)
out_file.close()
print('success!')
### create the slurm script
slurm_script = ('#!/bin/sh\n'
'#SBATCH --job-name={JOBNAME}\n'
'#SBATCH --output=%x_%j.out\n'
'#SBATCH --ntasks=1\n'
'#SBATCH --cpus-per-task={NP}\n'
'#SBATCH --mem={MEM}G\n'
'#SBATCH --time={TIME}\n'
'#SBATCH --partition={PART}\n'
'#SBATCH --wckey=maxquant\n\n'
'ml purge'
'ml MaxQuant/{VERSION}\n'
'maxquantcmd {MQOPT} {MQPAR}\n'
'rm -f {JOBNAME}.job\n'
)
# replace variables in the slurm script
Jobname = output.capitalize()
slurm_script = re.sub(r'{MQPAR}', xml_output, slurm_script)
slurm_script = re.sub(r'{MQOPT}', mq_opt, slurm_script)
slurm_script = re.sub(r'{JOBNAME}', Jobname, slurm_script)
slurm_script = re.sub(r'{NP}', str(NT), slurm_script)
slurm_script = re.sub(r'{MEM}', str(args.memory), slurm_script)
slurm_script = re.sub(r'{TIME}', args.time, slurm_script)
slurm_script = re.sub(r'{PART}', args.partition, slurm_script)
slurm_script = re.sub(r'{VERSION}', args.version, slurm_script)

# write slurm script - same format as the output folder
slurm_script_path = os.path.join(os.path.expanduser('./'), Jobname) + '.job'
slurm_script_file = open(slurm_script_path, 'w')
slurm_script_file.write(slurm_script)
slurm_script_file.close()

cmd = "sbatch " + Jobname + '.job'
if args.submit==True:
    os.system(cmd)
