#!/bin/bash
sname=`basename $0`
submit=1
SLPART="##SBATCH --partition="
SLNTPN="##SBATCH --ntasks-per-node="
SLTIME="##SBATCH --time="
nn=1
Ver=23Jun2022-foss-2022a
LMP_OPT="-sc none "
#======================================================================
function _split(){
        local n=$1 n1 n2
        n1=`echo $n | awk -F: '{print $1}'`
        n2=`echo $n | awk -F: '{print $2}'`
        eval $2=$n1 ; eval $3=$n2
}
#======================================================================
function Usage(){
        echo "Create and submit job for LAMMPS"
        echo ""
        echo "Usage: ${sname} <INPUT> [OPTION]"
        echo "
        -n  <n1[:n2]>     Number of MPI and OpenMP processors.
        -N  <n3[:n4]>     Number of nodes and number of tasks per node.
        -m  <mem>         Memory required for job (GB).
        -p  <part>        Partition name to submit the job. (use 'sinfo')
	-l  <disk>        Disk space required for scratch (GB). Run on local hard disk.
	-v  <ver>         Lammps Version. Avail: 23Jun2022, 2Aug2023 Default: 23Jun2022
	-j  <name>        Slurm Job Name. Default: name of INPUT.
        -t  <time>        run time of the job. Valid format: M, H:M:S, D-H, D-H:M
	-f  <f1,f2...>    Comma-separated list of files required for program execution.
	-o  <lopt>        lmp options.
        -so <sopt>        Additional slurm options if needed.
        -no               Only write job file.
        -h | --help       Print this message and exit."
        echo ""
        echo " Example:  $sname in.flow -n 16 -m 10 -p amd128 -t 10-0 -l 60 "
        echo ""
	exit
}
#======================================================================
[[ $# -eq 0 ]] && Usage
SOPT='n:m:N:p:v:o:j:f:hl:t:'
LOPT='no,so:,help'
OPTS=$(getopt -a -o ${SOPT} -l ${LOPT} -n ${sname} -- "$@")
[ $? -ne 0 ] && echo 'Terminating...' >&2 && exit 1
eval set -- "$OPTS"
unset OPTS
while true; do
	case "$1" in
		-n)
			_split $2 np nt
			shift		;;
		-N)
			_split $2 nn ntpn
			shift		;;
		-m)
			mem=$2
			shift		;;
		-p)
			SLPART=${SLPART:1}$2
			shift		;;
		-v)
			Ver=$2
			shift		;;
		-o)
			LMP_OPT+=$2
			shift		;;
		-l)
			Disk=$2
			shift		;;
		-t)
			SLTIME=${SLTIME:1}$2
			shift		;;
		-f)
			File=$2
			shift		;;
		-j)
			jobname=$2
			shift		;;
		--so)
			slurm_opt=$2
			shift		;;
		--no)
			submit=0	;;
		-h | --help)
			Usage ; exit	;;
		--)
			shift ; break	;;
		*)
			echo "$1: Wrong option!" >&2
			exit 1		;;
	esac
	shift
done
#echo 'Remaining arguments:'
for arg; do
	[[ -z $input ]] &&  input=$arg && continue
	echo "not defined argument --> '$arg'"
done
#======================================================================
if ! [ -e "$input" ]; then
  echo '-----------Error------------'
  echo "$input: file not found" >&2
  echo '----------------------------'
  exit 1
fi
#-----------------------------------
[[ -z $np ]]  && echo "Error: Number of processors not defined" && exit
[[ -z $mem ]] && echo "Error: Memory required not defined" && exit
[[ -z $nt ]]  && nt=1
[[ ! -z $ntpn ]] && SLNTPN=${SLNTPN:1}$ntpn

if [ "$mem" == "0" ]; then
  slcmd1="#SBATCH --exclusive"
else
  slcmd1="#SBATCH --mem=${mem}G"
fi
#-----------------------------------
if [ -z $jobname ]; then
   jobname=${input%.*}
   [[ "${input%%.*}" == "in" ]] && jobname=${input#in.}
fi
#-----------------------------------
if ! [ -e "$input" ]; then
  echo '-----------Error------------'
  echo "$input: file not found" >&2
  echo '----------------------------'
  exit 1
fi
dos2unix -q $input 
#-----------------------------------
if [ -z $Disk ]; then
	Disk=2
elif [ $nn -eq 1 ]; then
	[ -z $File ] && File=$input || File="{$File,$input}"
	CMD1="cp $File /tmp  ; cd /tmp"
	CMD2="sync_output.sh -a -e ompi.* " 
	CMD3="sync_output.sh -a -t 0" 
fi
#-----------------------------------
cat << END > $jobname.job
#!/bin/bash
#SBATCH -J ${jobname~}
#SBATCH -o %x_%j.out
#
$slcmd1
#
## number of nodes
#SBATCH -N $nn
 
## number of tasks
#SBATCH -n $np

## number of MPI tasks per node.
$SLNTPN

## number of cpus per task (OpenMP Threads)
#SBATCH --cpus-per-task=$nt

## how long job takes, wallclock time d-hh:mm:ss
$SLTIME

## name of queue or partition
$SLPART

#SBATCH --gres=tmp:${Disk}
#SBATCH --wckey=lammps

ml purge
ml LAMMPS/$Ver

# Run LAMMPS
$CMD1
$CMD2
mpirun lmp -i $input -l \${SLURM_SUBMIT_DIR}/log.${jobname}-\${SLURM_JOB_ID} $LMP_OPT
$CMD3
rm -f  \${SLURM_SUBMIT_DIR}/$jobname.job

END
[[ $submit -eq 1 ]] && sbatch $slurm_opt $jobname.job

