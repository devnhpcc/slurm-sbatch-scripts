#!/bin/bash
#!/bin/bash
sname=`basename "$0"`
#----------------------------------------------------------------
function _split(){
        local n=$1 n1 n2
        n1=`echo $n | awk -F: '{print $1}'`
        n2=`echo $n | awk -F: '{print $2}'`
        eval $2=$n1 ; eval $3=$n2
}
#----------------------------------------------------------------
function Usage(){
        echo "Create and submit job for COMSOL Multiphysics"
        echo ""
        echo "Usage: ${sname} <INPUT> [OPTION]"
        echo "
        -n  <np>          Number of cores.
        -N  <nn[:nt]>     Number of nodes and number of tasks per node.
        -m  <mem>         Memory required for job (GB).
        -p  <part>        Partition name to submit the job. (use 'sinfo')
        -v  <ver>         Software version. Available: 5.6, 6.1, 6.2, 6.3 Default: 6.2
	                  Note: Version 6.3 is not available on the amd48 and xeon24 partitions.
        -o  <output>      Name of output file. Default: <input>_out.
        -j  <jobname>     Name of job file.    Default: name of input file.
        -l  <disk>        Disk space required for scratch (GB). Default: 5
        -t  <time>        run time of the job. Valid format: M, H:M:S, D-H, D-H:M
	-s  <study>       The study to compute.
	-a  <on|{off}>    Control saving of recovery files.
	-r                Recover and continue computation.
	-co <opt>         Additional options for comsol batch command.
        -so <sopt>        Additional slurm options if needed.
        -no               Only write job file.
        -h | --help       Print this message and exit."
        echo ""
        echo " Example:   ${sname} test.mph -n 4 -m 4 -v 6.1 -p amd128 -t 1-0 -s std1 "
        echo ""
        exit
}
[[ $# -eq 0 ]] && Usage
#=================================================
Ver=6.2
Disk=2
part="amd128"
nn=1
JF=0
SLNTPN="##SBATCH --ntasks-per-node="
SLTIME="##SBATCH --time="
SLNN="##SBATCH -N "
AS="off"
OPT="-error on -tmpdir /tmp -prefsdir /tmp "
#------------------------------------------------
SOPT='n:m:p:v:N:s:j:o:t:l:a:rh'
LOPT='no,so:,co:,help'
OPTS=$(getopt -a -o ${SOPT} -l ${LOPT} -n ${sname} -- "$@")
[ $? -ne 0 ] && echo 'Terminating...' >&2 && exit 1
eval set -- "$OPTS"
unset OPTS
while true; do
        case "$1" in
                -n)
                        _split $2 np nt
                        shift           ;;
                -m)
                        mem=$2
                        shift           ;;
                -p)
                        part=$2
                        shift           ;;
                -t)
                        SLTIME=${SLTIME:1}$2
                        shift           ;;
                -v)
                        Ver=$2
                        shift           ;;
                -N)
                        _split $2 nn ntpn
                        shift           ;;
                -s)
                        STD="-study $2"
                        shift           ;;
                -a)
                        _split $2 AS rtime
			[ -z $rtime ] && rtime="1h"
                        shift           ;;
                -r)
                        RECOVER=yes     ;;
                -j)
                        jobname=$2
                        shift           ;;
                -l)
                        Disk=$2
                        shift           ;;
                -o)
                        output=$2
                        shift           ;;
                --co)
                        cmd_opt=$2
                        shift           ;;
                --so)
                        slurm_opt=$2
                        shift           ;;
                --no)
                        JF=1            ;;
                -h|--help)
                        Usage ; exit    ;;
                --)
                        shift ; break   ;;
                *)
                        echo "$1: Wrong optiona!" >&2
                        exit 1          ;;
        esac
        shift
done
#echo 'Remaining arguments:'
for arg; do
        [[ -z $input ]] &&  input=$arg && continue
        echo "not defined argument --> '$arg'"
done
[[ -z $input  ||  ! -e $input ]] && echo "invalid input file name" && exit
shift $((OPTIND - 1))
#------------------------------------------------
name=${input%%.*}
[[ -z $output ]] && output=${name}_out
[[ -z $np ]]  && echo "Error: Number of processors not defined" && exit
[[ -z $mem ]] && echo "Error: Memory required not defined" && exit
[[ -z $nt ]]  && nt=1
[[ $nn -gt 1 && -z $ntpn ]] && ntpn=$((np/nn + 1))
[[ ! -z $ntpn ]] && SLNTPN=${SLNTPN:1}$ntpn

if [ "$mem" == "0" ]; then
  SLMEM="#SBATCH --exclusive"
else
  SLMEM="#SBATCH --mem=${mem}G"
fi
#=================================================
if [ "${AS,,}" == "off" ]; then
	OPT+="-autosave off"
	CMD1=""
	CMD2=""
elif [ "${AS,,}" == "on" ]; then
	CMD1="sync_comsol $rtime"
	CMD2="sync_comsol"
else
	echo "Invalid autosave option please use 'on' or 'off'"
	exit
fi
if [ -n "$RECOVER" ]; then
	if [ -d recoveries -a -e $output.recovery ]; then
		RF=`cat ${output}.recovery`
		RF=${RF##*/}
		CMDR="rsync -a recoveries/$RF /tmp/recoveries "
		[ ! -d recoveries/$RF ] && CMDR="" || true
		OPT+=" -recover"
	else
		echo "can not recover simulation!"
		echo "'recoveries' or $output.recovery not found."
		exit
	fi
fi
#=================================================
if [ -z "$jobname" ]; then
   jobname=`basename $input .mph`
   jobname=${jobname~}
fi
jobfile=${name^}.job
#=================================================
write_job() {
   exec 3>&1 # Save current stdout
   exec > $jobfile
   echo "#!/bin/bash"
   echo "#SBATCH -J $jobname"
   echo "#SBATCH -o %x_%j.out"
   echo ""
   echo "## memory required per node."
   echo "$SLMEM"
   echo ""
   echo "## number of nodes"
   echo "#SBATCH -N $nn"
   echo ""
   echo "## number of cores"
   echo "#SBATCH -n $np"
   echo ""
   echo "## number of tasks per node (MPI task)"
   echo "$SLNTPN"
   echo ""
   echo "## number of cpus per task (OpenMP Threads)"
   echo "#SBATCH -c $nt"
   echo ""
   echo "## total run time of the job"
   echo "$SLTIME"
   echo ""
   echo "## name of queue or partition"
   echo "#SBATCH -p $part"
   echo ""
   echo "#SBATCH --gres=tmp:${Disk}"
   echo "#SBATCH --wckey=comsol"
   echo ""
   echo module purge
   echo ml comsol/$Ver
   echo ""
   echo "$CMD1"
   echo "$CMDR"
   echo "OPT=\"$OPT\""
   echo comsol batch -np $np $cmd_opt \$OPT -inputfile $input -outputfile ${output} $STD
   echo "$CMD2"
   echo rm -f $jobfile
   exec 1>&3  # Restore stdout
   [ $JF -eq 1 ] && exit
}
#=================================================
write_job
sbatch $slurm_opt $jobfile

